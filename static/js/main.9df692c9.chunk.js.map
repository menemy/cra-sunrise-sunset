{"version":3,"sources":["App.module.css","utils.js","Bar.jsx","App.jsx","index.jsx"],"names":["module","exports","formatDayIntervalParam","days","encodeURIComponent","formatTime","dateString","date","Date","parse","hour","getHours","minute","getMinutes","hourFormatted","minuteFormatted","parseMinutesBetween","firstDateString","secondDateString","firstDate","diff","Math","round","calcGradient","data","status","civil_twilight_begin_minutes","sunrise_minutes","sunset_minutes","civil_twilight_end_minutes","results","sunrise","sunset","civil_twilight_begin","civil_twilight_end","minutes","parseMinutes","getPositionPromise","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","Bar","prevData","animateMs","currObj","prevObj","React","useState","percent","setPercent","requestRef","useRef","previousTimeRef","startedTimeRef","animate","time","undefined","current","deltaTime","prevPercent","max","callback","requestAnimationFrame","useEffect","performance","now","cancelAnimationFrame","scale","min","window","screen","width","innerWidth","className","styles","bar","style","background","API_BASE","App","isLoading","setIsLoading","setData","error","setError","setDays","ref","a","coords","latitude","longitude","fetch","fetcher","json","response","toString","code","message","fetchData","day_length","app","pre","header","setDate","getDate","getMonth","getFullYear","formatDate","seconds","hours","floor","formatInterval","disabled","type","button","onClick","currDays","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9df692c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1kX79\",\"bar\":\"App_bar__3KjH7\",\"error\":\"App_error__1umzI\",\"header\":\"App_header__3ZZ1n\",\"pre\":\"App_pre__1O6Rm\",\"button\":\"App_button__13pio\"};","export const formatDayIntervalParam = (days) =>\n  encodeURIComponent(`${days} day`)\nexport const formatDate = (days) => {\n  const date = new Date()\n  date.setDate(date.getDate() + days)\n  return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`\n}\nexport const formatInterval = (seconds) => {\n  if (!seconds) return ''\n  const hours = Math.floor(seconds / 3600)\n  const minutes = Math.floor((seconds % 3600) / 60)\n  const minuteFormatted = minutes < 10 ? `0${minutes}` : minutes\n  return `${hours}:${minuteFormatted}`\n}\nexport const formatTime = (dateString) => {\n  if (!dateString) return ''\n  const date = new Date(Date.parse(dateString))\n  const hour = date.getHours()\n  const minute = date.getMinutes()\n  const hourFormatted = hour < 10 ? `0${hour}` : hour\n  const minuteFormatted = minute < 10 ? `0${minute}` : minute\n  return `${hourFormatted}:${minuteFormatted}`\n}\nconst parseMinutes = (dateString) => {\n  const date = new Date(Date.parse(dateString))\n  const minutes = date.getMinutes()\n  const hours = date.getHours()\n  return 60 * hours + minutes\n}\nconst parseMinutesBetween = (firstDateString, secondDateString) => {\n  const firstDate = new Date(Date.parse(firstDateString))\n  const secondDate = new Date(Date.parse(secondDateString))\n  const diff = secondDate - firstDate\n  return Math.round(diff / 1000 / 60)\n}\nexport const calcGradient = (data) => {\n  if (!data || typeof data.status === 'undefined') {\n    // initial animation\n    return {\n      civil_twilight_begin_minutes: 740,\n      sunrise_minutes: 740,\n      sunset_minutes: 740,\n      civil_twilight_end_minutes: 740,\n    }\n  }\n  /* eslint-disable camelcase */\n\n  const {\n    results: { sunrise, sunset, civil_twilight_begin, civil_twilight_end },\n  } = data\n  // It is possible that ending will be on next day\n  const civil_twilight_begin_minutes = parseMinutes(civil_twilight_begin)\n  const sunrise_minutes =\n    civil_twilight_begin_minutes +\n    parseMinutesBetween(civil_twilight_begin, sunrise)\n  const sunset_minutes =\n    civil_twilight_begin_minutes +\n    parseMinutesBetween(civil_twilight_begin, sunset)\n  const civil_twilight_end_minutes =\n    civil_twilight_begin_minutes +\n    parseMinutesBetween(civil_twilight_begin, civil_twilight_end)\n\n  return {\n    civil_twilight_begin_minutes,\n    sunrise_minutes,\n    sunset_minutes,\n    civil_twilight_end_minutes,\n  }\n  /* eslint-enable camelcase */\n}\nexport const getPositionPromise = (options) =>\n  new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options)\n  })\n","import React, { useEffect, useRef } from 'react'\nimport { calcGradient } from './utils'\nimport styles from './App.module.css'\n\n// eslint-disable-next-line react/prop-types\nexport function Bar({ data, prevData, animateMs }) {\n  const currObj = calcGradient(data)\n  const prevObj = calcGradient(prevData)\n\n  const [percent, setPercent] = React.useState(1)\n\n  /* eslint-disable camelcase */\n  const civil_twilight_begin_minutes = Math.round(\n    currObj.civil_twilight_begin_minutes -\n      (currObj.civil_twilight_begin_minutes -\n        prevObj.civil_twilight_begin_minutes) *\n        percent,\n  )\n  const sunrise_minutes = Math.round(\n    currObj.sunrise_minutes -\n      (currObj.sunrise_minutes - prevObj.sunrise_minutes) * percent,\n  )\n  const sunset_minutes = Math.round(\n    currObj.sunset_minutes -\n      (currObj.sunset_minutes - prevObj.sunset_minutes) * percent,\n  )\n  const civil_twilight_end_minutes = Math.round(\n    currObj.civil_twilight_end_minutes -\n      (currObj.civil_twilight_end_minutes -\n        prevObj.civil_twilight_end_minutes) *\n        percent,\n  )\n  /* eslint-enable camelcase */\n\n  const requestRef = useRef()\n  const previousTimeRef = useRef()\n  const startedTimeRef = useRef()\n\n  const callback = (deltaTime) => {\n    setPercent((prevPercent) =>\n      Math.max(0, prevPercent - deltaTime / animateMs),\n    )\n  }\n\n  const animate = (time) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current\n      callback(deltaTime)\n    }\n    previousTimeRef.current = time\n    if (time - startedTimeRef.current < animateMs) {\n      requestRef.current = requestAnimationFrame(animate)\n    }\n  }\n\n  useEffect(() => {\n    setPercent(1)\n    startedTimeRef.current = performance.now()\n    requestRef.current = requestAnimationFrame(animate)\n    return () => cancelAnimationFrame(requestRef.current)\n  }, [data, prevData])\n\n  // Scale for mobile\n  const scale = Math.min((Math.min(window.screen.width, window.innerWidth) - 60) / 1440, 1)\n  return (\n    /* eslint-disable camelcase */\n    <div\n      className={styles.bar}\n      style={{\n        width: scale * 1440,\n        background:\n          `linear-gradient(90deg, #1F0E4E ${\n            scale * civil_twilight_begin_minutes\n          }px,` +\n          ` #00D0F0 ${scale * sunrise_minutes}px,#00D0F0 ${\n            scale * sunset_minutes\n          }px, #1F0E4E ${scale * civil_twilight_end_minutes}px)`,\n      }}\n    />\n    /* eslint-enable camelcase */\n  )\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport styles from './App.module.css'\nimport {\n  formatDate,\n  formatDayIntervalParam,\n  formatInterval,\n  formatTime,\n  getPositionPromise,\n} from './utils'\nimport { Bar } from './Bar'\n\nconst API_BASE = 'https://api.sunrise-sunset.org/json'\nconst ANIMATION_LENGTH_MS = 700\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [data, setData] = useState({ results: {} })\n  const [error, setError] = useState('')\n  const [days, setDays] = useState(0)\n\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = data\n    async function fetchData() {\n      if (!navigator.geolocation) {\n        setError('Geolocation is not supported by your browser')\n      } else {\n        setIsLoading(true)\n        try {\n          const {\n            coords: { latitude, longitude },\n          } = await getPositionPromise()\n          const fetcher = await fetch(\n            `${API_BASE}?lat=${encodeURIComponent(latitude)}` +\n              `&lng=${encodeURIComponent(\n                longitude,\n              )}&date=${formatDayIntervalParam(days)}&formatted=0`,\n          )\n          const response = await fetcher.json()\n          const { status } = response\n          if (status === 'OK') {\n            setData(response)\n          } else {\n            setError(status)\n          }\n        } catch (exception) {\n          if (exception.toString() === '[object GeolocationPositionError]') {\n            setError(`GeolocationPositionError, code=${ exception.code}`)\n          } else {\n            setError(exception.message)\n          }\n        } finally {\n          setIsLoading(false)\n        }\n      }\n    }\n    fetchData()\n  }, [days])\n\n  const {\n    // eslint-disable-next-line camelcase\n    results: { sunrise, sunset, day_length },\n  } = data\n\n  // Get the previous data (was passed into hook on last render)\n  const prevData = ref.current\n  return (\n    <div className={styles.app}>\n      {error ? (\n        <h3 className={styles.error}>{error}</h3>\n      ) : (\n        <div className={styles.pre}>\n          <div>\n            <p className={styles.header}>{formatDate(days)}</p>\n            <p>\n              <strong>Sunrise:</strong> {formatTime(sunrise)}\n              <br />\n              <strong>Sunset:</strong> {formatTime(sunset)}\n              <br />\n              <strong>Length:</strong> {formatInterval(day_length)}\n              <br />\n            </p>\n            <button\n              disabled={!!isLoading}\n              type=\"button\"\n              className={styles.button}\n              onClick={() => setDays((currDays) => currDays - 7)}\n            >\n              -7 days\n            </button>\n            <button\n              disabled={!!isLoading}\n              type=\"button\"\n              className={styles.button}\n              onClick={() => setDays((currDays) => currDays - 1)}\n            >\n              -1 day\n            </button>\n            <button\n              disabled={!!isLoading}\n              type=\"button\"\n              className={styles.button}\n              onClick={() => setDays((currDays) => currDays + 1)}\n            >\n              +1 day\n            </button>\n            <button\n              disabled={!!isLoading}\n              type=\"button\"\n              className={styles.button}\n              onClick={() => setDays((currDays) => currDays + 7)}\n            >\n              +7 days\n            </button>\n            <Bar\n              data={data}\n              prevData={prevData}\n              animateMs={ANIMATION_LENGTH_MS}\n            />\n            <p>{isLoading ? '⌛' : ''}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}